{"version":3,"sources":["components/Landing.js","actions/menu.js","actions/types.js","config/constants.js","components/SauceCrust.jsx","actions/pizza.js","components/Customer.jsx","actions/customer.js","components/Toppings.jsx","components/ReviewOrder.jsx","components/Confirmation.jsx","components/Main.jsx","reducers/menu.js","reducers/pizza.js","reducers/customer.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["connect","state","dispatch","nextMenu","type","className","Button","variant","onClick","e","preventDefault","handleClick","TOPPINGS","value","label","CRUST_SIZES","SAUCE_LEVELS","pizzaRed","pizza","setSauceLevel","level","payload","parseInt","setCrustSize","size","previousMenu","useEffect","Form","onSubmit","handleNext","Group","controlId","Label","Control","as","defaultValue","crustSize","toString","onChange","target","handleCrustSizeSelect","map","crust","key","sauceLevel","handleSauceLevelSelect","sauce","handlePrev","customerRed","customer","setCustomer","data","name","email","street","phone","city","trim","useState","formData","setFormData","isValid","handleInputChange","placeholder","disabled","animatedComponents","makeAnimated","setToppings","toppings","clearToppings","isToppingSelected","testValue","availableToppings","selectedToppings","topping","push","closeMenuOnSelect","components","options","selectedOptions","toppingValues","isMulti","reduce","accumulator","includes","Row","Col","find","join","resetMenu","clearCustomer","resetPizza","setTimeout","menuRed","menu","console","log","step","initialState","combineReducers","action","Math","max","Object","assign","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","App","Container","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAoCeA,eANS,SAAAC,GAAK,MAAK,MAEP,SAAAC,GAAQ,MAAK,CACtCC,SAAU,kBAAMD,EC9BT,CACLE,KCDqB,kBFiCVJ,EA3BC,SAAC,GAAkB,IAAhBG,EAAe,EAAfA,SAOjB,OACE,kBAAC,WAAD,KACE,yBAAKE,UAAU,eACb,wBAAIA,UAAU,aAAd,4BACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,SAAAC,GAAC,OAVtB,SAAAA,GAClBA,EAAEC,iBAEFP,IAO4CQ,CAAYF,KAApD,6B,QGpBKG,EAAW,CACtB,CAAEC,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,YAAaC,MAAO,aAC7B,CAAED,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,QAASC,MAAO,SACzB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,WAAYC,MAAO,aAGjBC,EAAc,CACzB,CAAEF,MAAO,EAAGC,MAAO,iBACnB,CAAED,MAAO,GAAIC,MAAO,mBACpB,CAAED,MAAO,GAAIC,MAAO,oBACpB,CAAED,MAAO,GAAIC,MAAO,oBAGTE,EAAe,CAC1B,CAAEH,MAAO,EAAGC,MAAO,oBACnB,CAAED,MAAO,EAAGC,MAAO,mBACnB,CAAED,MAAO,EAAGC,MAAO,iBACnB,CAAED,MAAO,EAAGC,MAAO,kBCiFNd,eAXS,SAAAC,GAAK,MAAK,CAChCgB,SAAUhB,EAAMiB,UAGS,SAAAhB,GAAQ,MAAK,CACtCiB,cAAe,SAAAC,GAAK,OAAIlB,ECvFjB,CACLE,KHH2B,kBGI3BiB,QAASC,SDqFoCF,MAC/CG,aAAc,SAAAC,GAAI,OAAItB,ECjFf,CACLE,KHT0B,iBGU1BiB,QAASC,SD+EiCE,MAC5CrB,SAAU,kBAAMD,EH/FT,CACLE,KCDqB,eEgGvBqB,aAAc,kBAAMvB,EH1Fb,CACLE,KCNyB,sBEkGdJ,EA3FI,SAAC,GAMb,IALLiB,EAKI,EALJA,SACAE,EAII,EAJJA,cACAI,EAGI,EAHJA,aACApB,EAEI,EAFJA,SACAsB,EACI,EADJA,aAEAC,qBAAU,cAAU,IAwBpB,OACE,kBAAC,WAAD,KACE,wBAAIrB,UAAU,aAAd,mBACA,kBAACsB,EAAA,EAAD,CAAMC,SAAU,SAAAnB,GAAC,OAnBF,SAAAA,GACjBA,EAAEC,iBAEFP,IAgBuB0B,CAAWpB,KAC9B,kBAACkB,EAAA,EAAKG,MAAN,CAAYC,UAAU,wBACpB,kBAACJ,EAAA,EAAKK,MAAN,uBACA,kBAACL,EAAA,EAAKM,QAAN,CACEC,GAAG,SACHC,aAAclB,EAASmB,UAAUC,WACjCC,SAAU,SAAA7B,GAAC,OAnBS,SAAAA,GAE5Bc,EAAad,EAAE8B,OAAO1B,OAiBC2B,CAAsB/B,KAEpCM,EAAY0B,KAAI,SAAAC,GACf,OACE,4BAAQC,IAAKD,EAAM7B,MAAOA,MAAO6B,EAAM7B,MAAMwB,YAC1CK,EAAM5B,YAMjB,kBAACa,EAAA,EAAKG,MAAN,CAAYC,UAAU,yBACpB,kBAACJ,EAAA,EAAKK,MAAN,oBACA,kBAACL,EAAA,EAAKM,QAAN,CACEC,GAAG,SACHC,aAAclB,EAAS2B,WAAWP,WAClCC,SAAU,SAAA7B,GAAC,OA9BU,SAAAA,GAE7BU,EAAcV,EAAE8B,OAAO1B,OA4BAgC,CAAuBpC,KAErCO,EAAayB,KAAI,SAAAK,GAChB,OACE,4BAAQH,IAAKG,EAAMjC,MAAOA,MAAOiC,EAAMjC,MAAMwB,YAC1CS,EAAMhC,YAMjB,kBAACR,EAAA,EAAD,CAAQC,QAAQ,YAAYH,KAAK,SAASI,QAAS,SAAAC,GAAC,OA1DvC,SAAAA,GACjBA,EAAEC,iBAEFe,IAuD4DsB,CAAWtC,KAAnE,QAEU,IACV,kBAACH,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,UAA/B,a,wBE+DOJ,eAVS,SAAAC,GAAK,MAAK,CAChC+C,YAAa/C,EAAMgD,aAGM,SAAA/C,GAAQ,MAAK,CACtCgD,YAAa,SAAAC,GAAI,OAAIjD,ECzII,SAAC,GAAiD,IAA/CkD,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,KAAMvD,EAAY,EAAZA,MAC9D,MAAO,CACLG,KLJwB,eKKxBiB,QAAS,CACP+B,KAAMA,EAAKK,OACXJ,MAAOA,EAAMI,OACbH,OAAQA,EAAOG,OACfF,MAAOA,EAAME,OACbD,KAAMA,EAAKC,OACXxD,MAAOA,EAAMwD,SDgIaP,CAAYC,KAC1ChD,SAAU,kBAAMD,ELzIT,CACLE,KCDqB,eI0IvBqB,aAAc,kBAAMvB,ELpIb,CACLE,KCNyB,sBI4IdJ,EAvIE,SAAC,GAA0D,IAAxDgD,EAAuD,EAAvDA,YAAaE,EAA0C,EAA1CA,YAAa/C,EAA6B,EAA7BA,SAAUsB,EAAmB,EAAnBA,aAAmB,EACzCiC,mBAAS,CACvCN,KAAM,GACNC,MAAO,GACPC,OAAQ,GACRE,KAAM,GACNvD,MAAO,GACPsD,MAAO,KAPgE,mBAClEI,EADkE,KACxDC,EADwD,KAUnEC,EACJF,EAASP,KAAKK,QACdE,EAASN,MAAMI,QACfE,EAASL,OAAOG,QAChBE,EAASH,KAAKC,QACdE,EAAS1D,MAAMwD,QACfE,EAASJ,MAAME,OAEjB/B,qBAAU,WACRkC,GAAY,iCAAYZ,QACvB,IAEH,IAAMc,EAAoB,SAAArD,GACxBmD,EAAY,eAAKD,EAAN,eAAiBlD,EAAE8B,OAAOa,KAAO3C,EAAE8B,OAAO1B,UAyBvD,OACE,kBAAC,WAAD,KACE,wBAAIR,UAAU,aAAd,yBACA,kBAACsB,EAAA,EAAD,CAAMC,SAAU,SAAAnB,GAAC,OAXF,SAAAA,GACjBA,EAAEC,iBAEFwC,EAAYS,GAEZxD,IAMuB0B,CAAWpB,KAC9B,kBAACkB,EAAA,EAAKG,MAAN,CAAYC,UAAU,qBACpB,kBAACJ,EAAA,EAAKK,MAAN,aACA,kBAACL,EAAA,EAAKM,QAAN,CACE7B,KAAK,OACL2D,YAAY,eACZX,KAAK,OACLvC,MAAO8C,EAASP,KAChBd,SAAU,SAAA7B,GAAC,OAAIqD,EAAkBrD,OAGrC,kBAACkB,EAAA,EAAKG,MAAN,CAAYC,UAAU,sBACpB,kBAACJ,EAAA,EAAKK,MAAN,cACA,kBAACL,EAAA,EAAKM,QAAN,CACE7B,KAAK,QACL2D,YAAY,mBACZX,KAAK,QACLvC,MAAO8C,EAASN,MAChBf,SAAU,SAAA7B,GAAC,OAAIqD,EAAkBrD,OAGrC,kBAACkB,EAAA,EAAKG,MAAN,CAAYC,UAAU,uBACpB,kBAACJ,EAAA,EAAKK,MAAN,uBACA,kBAACL,EAAA,EAAKM,QAAN,CACE7B,KAAK,OACL2D,YAAY,8BACZX,KAAK,SACLvC,MAAO8C,EAASL,OAChBhB,SAAU,SAAA7B,GAAC,OAAIqD,EAAkBrD,OAGrC,kBAACkB,EAAA,EAAKG,MAAN,CAAYC,UAAU,qBACpB,kBAACJ,EAAA,EAAKK,MAAN,aACA,kBAACL,EAAA,EAAKM,QAAN,CACE7B,KAAK,OACL2D,YAAY,WACZX,KAAK,OACLvC,MAAO8C,EAASH,KAChBlB,SAAU,SAAA7B,GAAC,OAAIqD,EAAkBrD,OAGrC,kBAACkB,EAAA,EAAKG,MAAN,CAAYC,UAAU,sBACpB,kBAACJ,EAAA,EAAKK,MAAN,cACA,kBAACL,EAAA,EAAKM,QAAN,CACE7B,KAAK,OACL2D,YAAY,KACZX,KAAK,QACLvC,MAAO8C,EAAS1D,MAChBqC,SAAU,SAAA7B,GAAC,OAAIqD,EAAkBrD,OAGrC,kBAACkB,EAAA,EAAKG,MAAN,CAAYC,UAAU,sBACpB,kBAACJ,EAAA,EAAKK,MAAN,cACA,kBAACL,EAAA,EAAKM,QAAN,CACE7B,KAAK,OACL2D,YAAY,GACZX,KAAK,QACLvC,MAAO8C,EAASJ,MAChBjB,SAAU,SAAA7B,GAAC,OAAIqD,EAAkBrD,OAGrC,kBAACH,EAAA,EAAD,CAAQC,QAAQ,YAAYH,KAAK,SAASI,QAAS,SAAAC,GAAC,OA9EvC,SAAAA,GACjBA,EAAEC,iBAEFe,IA2E4DsB,CAAWtC,KAAnE,QAEU,IACV,kBAACH,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,SAAS4D,UAAWH,GAAnD,qB,gBE9GFI,EAAqBC,cAqFZlE,eAXS,SAAAC,GAAK,MAAK,CAChCgB,SAAUhB,EAAMiB,UAGS,SAAAhB,GAAQ,MAAK,CACtCiE,YAAa,SAAAC,GAAQ,OAAIlE,EHvEA,SAAAkE,GACzB,MAAO,CACLhE,KHdwB,eGexBiB,QAAS+C,GGoEuBD,CAAYC,KAC9CC,cAAe,kBAAMnE,EHhEd,CACLE,KHpB0B,oBMoF5BD,SAAU,kBAAMD,EP5FT,CACLE,KCDqB,eM6FvBqB,aAAc,kBAAMvB,EPvFb,CACLE,KCNyB,sBM+FdJ,EAnFE,SAAC,GAMX,IALLiB,EAKI,EALJA,SACAd,EAII,EAJJA,SACAgE,EAGI,EAHJA,YAEA1C,GACI,EAFJ4C,cAEI,EADJ5C,cAsBM6C,EAAoB,SAAAC,GAAc,IAAD,uBACrC,YAAkBtD,EAASmD,SAA3B,+CAAqC,CACnC,GADmC,UACrBG,EACZ,OAAO,GAH0B,kFAMrC,OAAO,GAGHC,EAAoB,GACpBC,EAAmB,GA/BrB,uBAiCJ,YAAoB7D,EAApB,+CAA8B,CAAC,IAAtB8D,EAAqB,QACxBJ,EAAkBI,EAAQ7D,OAC5B4D,EAAiBE,KAAKD,GAEtBF,EAAkBG,KAAKD,IArCvB,kFAyCJ,OACE,kBAAC,WAAD,KACE,wBAAIrE,UAAU,aAAd,YACA,kBAAC,IAAD,CACEuE,mBAAmB,EACnBC,WAAYZ,EACZpD,MAAO4D,EACPK,QAASN,EACTlC,SApCe,SAAAyC,GACnB,IAAMC,EACgB,OAApBD,EACI,GACAA,EAAgBtC,KAAI,SAAAiC,GAAO,OAAIA,EAAQ7D,SAC7CsD,EAAYa,IAgCRC,SAAO,IAET,yBAAK5E,UAAU,QACb,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYH,KAAK,SAASI,QAAS,SAAAC,GAAC,OApDvC,SAAAA,GACjBA,EAAEC,iBAEFe,IAiD4DsB,CAAWtC,KAAnE,QAEU,IACV,kBAACH,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,SAASI,QAAS,SAAAC,GAAC,OAjDrC,SAAAA,GACjBA,EAAEC,iBAEFP,IA8C0D0B,CAAWpB,KAAjE,a,gBCiCOT,eAVS,SAAAC,GAAK,MAAK,CAChC+C,YAAa/C,EAAMgD,SACnBhC,SAAUhB,EAAMiB,UAGS,SAAAhB,GAAQ,MAAK,CACtCC,SAAU,kBAAMD,ERxGT,CACLE,KCDqB,eOyGvBqB,aAAc,kBAAMvB,ERnGb,CACLE,KCNyB,sBO2GdJ,EAtGK,SAAC,GAAuD,IAArDG,EAAoD,EAApDA,SAAUsB,EAA0C,EAA1CA,aAAcuB,EAA4B,EAA5BA,YAAa/B,EAAe,EAAfA,SAapDwD,EAAmB7D,EAASsE,QAAO,SAACC,EAAaT,GAIrD,OAHIzD,EAASmD,SAASgB,SAASV,EAAQ7D,QACrCsE,EAAYR,KAAKD,EAAQ5D,OAEpBqE,IACN,IAEH,OACE,kBAAC,WAAD,KACE,wBAAI9E,UAAU,aAAd,gBACA,yBAAKA,UAAU,QACb,uBAAGA,UAAU,aAAb,SACA,kBAACgF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,KAGItE,EAAauE,MAAK,SAAAzC,GAAK,OAAIA,EAAMjC,QAAUI,EAAS2B,cACjD9B,QAIT,kBAACuE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,mBACA,kBAACA,EAAA,EAAD,KAGIvE,EAAYwE,MAAK,SAAA7C,GAAK,OAAIA,EAAM7B,QAAUI,EAASmB,aAChDtB,QAIT,kBAACuE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,KAAMb,EAAiBe,KAAK,SAGhC,yBAAKnF,UAAU,QACb,uBAAGA,UAAU,aAAb,YACA,kBAACgF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,KAAMtC,EAAYI,OAEpB,kBAACiC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,KAAMtC,EAAYK,QAEpB,kBAACgC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,KAAMtC,EAAYM,SAEpB,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,KAAMtC,EAAYQ,OAEpB,kBAAC6B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,KAAMtC,EAAY/C,QAEpB,kBAACoF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,KAAMtC,EAAYO,SAGtB,2BACE,yDAEF,kBAACjD,EAAA,EAAD,CAAQC,QAAQ,YAAYH,KAAK,SAASI,QAAS,SAAAC,GAAC,OA/ErC,SAAAA,GACjBA,EAAEC,iBAEFe,IA4E0DsB,CAAWtC,KAAnE,QAEU,IACV,kBAACH,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,SAASI,QAAS,SAAAC,GAAC,OA5EnC,SAAAA,GACjBA,EAAEC,iBACFP,IA0EwD0B,CAAWpB,KAAjE,qBC/CST,eAVS,SAAAC,GAAK,MAAK,CAChC+C,YAAa/C,EAAMgD,aAGM,SAAA/C,GAAQ,MAAK,CACtCuF,UAAW,kBAAMvF,ETzBV,CACLE,KCXsB,gBQoCxBsF,cAAe,kBAAMxF,EHxBd,CACLE,KLjB0B,oBQyC5BuF,WAAY,kBAAMzF,ELNX,CACLE,KHxBuB,oBQgCZJ,EApCM,SAAC,GAKf,IAJLgD,EAII,EAJJA,YACAyC,EAGI,EAHJA,UACAC,EAEI,EAFJA,cACAC,EACI,EADJA,WAWA,OATAjE,qBAAU,WAERkE,YAAW,WACTF,IACAC,IACAF,MACC,QAIH,kBAAC,WAAD,KACE,wBAAIpF,UAAU,aAAd,sBACA,wDAA8B2C,EAAYI,KAA1C,KACA,oFCUSpD,eANS,SAAAC,GAAK,MAAK,CAChC4F,QAAS5F,EAAM6F,SAGU,SAAA5F,GAAQ,MAAK,KAEzBF,EA3BF,SAAC,GAAiB,IAAf6F,EAAc,EAAdA,QAKd,OAJAnE,qBAAU,WACRqE,QAAQC,IAAIH,KACX,IAKD,6BACoB,IAAjBA,EAAQI,MAAc,kBAAC,EAAD,MACL,IAAjBJ,EAAQI,MAAc,kBAAC,EAAD,MACL,IAAjBJ,EAAQI,MAAc,kBAAC,EAAD,MACL,IAAjBJ,EAAQI,MAAc,kBAAC,EAAD,MACL,IAAjBJ,EAAQI,MAAc,kBAAC,EAAD,MACL,IAAjBJ,EAAQI,MAAc,kBAAC,EAAD,U,gBCvBvBC,EAAe,CACnBD,KAAM,GCKFC,EAAe,CACnBtD,WAAY,EACZR,UAAW,EACXgC,SAAU,CAAC,WCTP8B,EAAe,CACnB9C,KAAM,GACNC,MAAO,GACPC,OAAQ,GACRE,KAAM,GACNvD,MAAO,GACPsD,MAAO,ICFM4C,cAAgB,CAC7BL,KHDkB,WAAmC,IAAlC7F,EAAiC,uDAAzBiG,EAAcE,EAAW,uCACpD,OAAQA,EAAOhG,MACb,IVLqB,YUMnB,MAAO,CACL6F,KAAMhG,EAAMgG,KAAO,GAGvB,IVTyB,gBUUvB,MAAO,CACLA,KAAMI,KAAKC,IAAIrG,EAAMgG,KAAO,EAAG,IAEnC,IVZsB,aUapB,OAAO,eACFC,GAEP,QACE,OAAOjG,IGdXiB,MFMmB,WAAmC,IAAlCjB,EAAiC,uDAAzBiG,EAAcE,EAAW,uCACrD,OAAQA,EAAOhG,MACb,IXT2B,kBWUzB,OAAO,eACFH,EADL,CAEE2C,WAAYwD,EAAO/E,UAEvB,IXb0B,iBWcxB,OAAO,eACFpB,EADL,CAEEmC,UAAWgE,EAAO/E,UAEtB,IXhBwB,eWiBtB,OAAO,eACFpB,EADL,CAEEmE,SAAUgC,EAAO/E,UAErB,IXpB0B,iBWqBxB,OAAOkF,OAAOC,OAAO,GAAIvG,EAAO,CAAEmE,SAAU,KAC9C,IXpBuB,cWqBrB,OAAO,eACF8B,GAEP,QACE,OAAOjG,IE7BXgD,SDEsB,WAAmC,IAAlChD,EAAiC,uDAAzBiG,EAAcE,EAAW,uCACxD,OAAQA,EAAOhG,MACb,IZbwB,eYctB,OAAO,eACFH,EADL,GAEKmG,EAAO/E,SAEd,IZjB0B,iBYkBxB,OAAO,eACF6E,GAEP,QACE,OAAOjG,MEXPwG,EAAQC,YACZC,EACAC,OAAOC,8BAAgCD,OAAOC,gCAajCC,MAVf,WACE,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAACM,EAAA,EAAD,KACE,kBAAC,EAAD,SCTYC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.676632c1.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport { nextMenu } from '../actions/menu';\r\n\r\n// This view is displayed when the App is first loaded or a new order is to be made\r\nconst Landing = ({ nextMenu }) => {\r\n  const handleClick = e => {\r\n    e.preventDefault();\r\n    // Navigate user to the first step of the order (sauce and crust)\r\n    nextMenu();\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"text-center\">\r\n        <h1 className=\"display-4\">Welcome to Anton's Pizza</h1>\r\n        <Button variant=\"success\" onClick={e => handleClick(e)}>\r\n          Order my Pizza, Now!\r\n        </Button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nLanding.propTypes = {};\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  nextMenu: () => dispatch(nextMenu()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Landing);\r\n","import { NEXT_MENU, PREVIOUS_MENU, RESET_MENU } from './types';\r\n\r\nexport const nextMenu = () => {\r\n  return {\r\n    type: NEXT_MENU,\r\n  };\r\n};\r\n\r\nexport const previousMenu = () => {\r\n  return {\r\n    type: PREVIOUS_MENU,\r\n  };\r\n};\r\n\r\nexport const resetMenu = () => {\r\n  return {\r\n    type: RESET_MENU,\r\n  };\r\n};\r\n","export const SET_CUSTOMER = 'SET_CUSTOMER';\r\nexport const CLEAR_CUSTOMER = 'CLEAR_CUSTOMER';\r\n\r\nexport const NEXT_MENU = 'NEXT_MENU';\r\nexport const PREVIOUS_MENU = 'PREVIOUS_MENU';\r\nexport const RESET_MENU = 'RESET_MENU';\r\n\r\nexport const SET_SAUCE_LEVEL = 'SET_SAUCE_LEVEL';\r\nexport const SET_CRUST_SIZE = 'SET_CRUST_SIZE';\r\n\r\nexport const SET_TOPPINGS = 'SET_TOPPINGS';\r\nexport const CLEAR_TOPPINGS = 'CLEAR_TOPPINGS';\r\n\r\nexport const RESET_PIZZA = 'RESET_PIZZA';\r\n","export const TOPPINGS = [\r\n  { value: 'cheese', label: 'Cheese' },\r\n  { value: 'pepperoni', label: 'Pepperoni' },\r\n  { value: 'pine_apple', label: 'Pine Apple' },\r\n  { value: 'spinach', label: 'Spinach' },\r\n  { value: 'onion', label: 'Onion' },\r\n  { value: 'garlic', label: 'Garlic' },\r\n  { value: 'mushroom', label: 'Mushroom' },\r\n];\r\n\r\nexport const CRUST_SIZES = [\r\n  { value: 8, label: '8 inch - Mini' },\r\n  { value: 10, label: '10 inch - Small' },\r\n  { value: 12, label: '12 inch - Medium' },\r\n  { value: 14, label: '14 inch - Large' },\r\n];\r\n\r\nexport const SAUCE_LEVELS = [\r\n  { value: 0, label: 'Sauceless Border' },\r\n  { value: 1, label: 'Regular Portion' },\r\n  { value: 2, label: 'Light Portion' },\r\n  { value: 3, label: 'Extra Portion' },\r\n];\r\n","import React, { Fragment, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport { setSauceLevel, setCrustSize } from '../actions/pizza';\r\nimport { nextMenu, previousMenu } from '../actions/menu';\r\n\r\nimport { CRUST_SIZES, SAUCE_LEVELS } from '../config/constants';\r\n\r\nconst SauceCrust = ({\r\n  pizzaRed,\r\n  setSauceLevel,\r\n  setCrustSize,\r\n  nextMenu,\r\n  previousMenu,\r\n}) => {\r\n  useEffect(() => {}, []);\r\n\r\n  const handlePrev = e => {\r\n    e.preventDefault();\r\n    // Navigate user to the previous step\r\n    previousMenu();\r\n  };\r\n\r\n  const handleNext = e => {\r\n    e.preventDefault();\r\n    // Navigate user to the next step\r\n    nextMenu();\r\n  };\r\n\r\n  const handleCrustSizeSelect = e => {\r\n    // Update crust size state\r\n    setCrustSize(e.target.value);\r\n  };\r\n\r\n  const handleSauceLevelSelect = e => {\r\n    // Update sauce level state\r\n    setSauceLevel(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"display-4\">Sauce and Crust</h1>\r\n      <Form onSubmit={e => handleNext(e)}>\r\n        <Form.Group controlId=\"sauceCrust.crustSize\">\r\n          <Form.Label>Crust Diameter</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            defaultValue={pizzaRed.crustSize.toString()}\r\n            onChange={e => handleCrustSizeSelect(e)}\r\n          >\r\n            {CRUST_SIZES.map(crust => {\r\n              return (\r\n                <option key={crust.value} value={crust.value.toString()}>\r\n                  {crust.label}\r\n                </option>\r\n              );\r\n            })}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"sauceCrust.sauceLevel\">\r\n          <Form.Label>Sauce Level</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            defaultValue={pizzaRed.sauceLevel.toString()}\r\n            onChange={e => handleSauceLevelSelect(e)}\r\n          >\r\n            {SAUCE_LEVELS.map(sauce => {\r\n              return (\r\n                <option key={sauce.value} value={sauce.value.toString()}>\r\n                  {sauce.label}\r\n                </option>\r\n              );\r\n            })}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Button variant=\"secondary\" type=\"button\" onClick={e => handlePrev(e)}>\r\n          Back\r\n        </Button>{' '}\r\n        <Button variant=\"success\" type=\"submit\">\r\n          Next\r\n        </Button>\r\n      </Form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nSauceCrust.propTypes = {};\r\n\r\nconst mapStateToProps = state => ({\r\n  pizzaRed: state.pizza,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setSauceLevel: level => dispatch(setSauceLevel(level)),\r\n  setCrustSize: size => dispatch(setCrustSize(size)),\r\n  nextMenu: () => dispatch(nextMenu()),\r\n  previousMenu: () => dispatch(previousMenu()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SauceCrust);\r\n","import {\r\n  SET_SAUCE_LEVEL,\r\n  SET_CRUST_SIZE,\r\n  SET_TOPPINGS,\r\n  CLEAR_TOPPINGS,\r\n  RESET_PIZZA,\r\n} from './types';\r\n\r\nexport const setSauceLevel = sauceLevel => {\r\n  return {\r\n    type: SET_SAUCE_LEVEL,\r\n    payload: parseInt(sauceLevel),\r\n  };\r\n};\r\n\r\nexport const setCrustSize = crustSize => {\r\n  return {\r\n    type: SET_CRUST_SIZE,\r\n    payload: parseInt(crustSize),\r\n  };\r\n};\r\n\r\nexport const setToppings = toppings => {\r\n  return {\r\n    type: SET_TOPPINGS,\r\n    payload: toppings,\r\n  };\r\n};\r\n\r\nexport const clearToppings = () => {\r\n  return {\r\n    type: CLEAR_TOPPINGS,\r\n  };\r\n};\r\n\r\nexport const resetPizza = () => {\r\n  return {\r\n    type: RESET_PIZZA,\r\n  };\r\n};\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { setCustomer } from '../actions/customer';\r\nimport { nextMenu, previousMenu } from '../actions/menu';\r\n\r\nconst Customer = ({ customerRed, setCustomer, nextMenu, previousMenu }) => {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    street: '',\r\n    city: '',\r\n    state: '',\r\n    phone: '',\r\n  });\r\n\r\n  const isValid =\r\n    formData.name.trim() &&\r\n    formData.email.trim() &&\r\n    formData.street.trim() &&\r\n    formData.city.trim() &&\r\n    formData.state.trim() &&\r\n    formData.phone.trim();\r\n\r\n  useEffect(() => {\r\n    setFormData(() => ({ ...customerRed }));\r\n  }, []);\r\n\r\n  const handleInputChange = e => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    // const name = e.target.name;\r\n    // const value = e.target.value;\r\n    // setFormData(data => {\r\n    //   return {\r\n    //     ...data,\r\n    //     [name]: value,\r\n    //   };\r\n    // });\r\n  };\r\n\r\n  const handlePrev = e => {\r\n    e.preventDefault();\r\n    // Navigate user to the previous step\r\n    previousMenu();\r\n  };\r\n\r\n  const handleNext = e => {\r\n    e.preventDefault();\r\n    // Update the global customer state\r\n    setCustomer(formData);\r\n    // Navigate user to the next step\r\n    nextMenu();\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"display-4\">Customer and Shipping</h1>\r\n      <Form onSubmit={e => handleNext(e)}>\r\n        <Form.Group controlId=\"customerForm.name\">\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your name...\"\r\n            name=\"name\"\r\n            value={formData.name}\r\n            onChange={e => handleInputChange(e)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"customerForm.email\">\r\n          <Form.Label>Email</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            placeholder=\"name@example.com\"\r\n            name=\"email\"\r\n            value={formData.email}\r\n            onChange={e => handleInputChange(e)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"customerForm.street\">\r\n          <Form.Label>Street Address</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Street and Apartment Number\"\r\n            name=\"street\"\r\n            value={formData.street}\r\n            onChange={e => handleInputChange(e)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"customerForm.city\">\r\n          <Form.Label>City</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Bellevue\"\r\n            name=\"city\"\r\n            value={formData.city}\r\n            onChange={e => handleInputChange(e)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"customerForm.state\">\r\n          <Form.Label>State</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"WA\"\r\n            name=\"state\"\r\n            value={formData.state}\r\n            onChange={e => handleInputChange(e)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"customerForm.phone\">\r\n          <Form.Label>Phone</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            name=\"phone\"\r\n            value={formData.phone}\r\n            onChange={e => handleInputChange(e)}\r\n          />\r\n        </Form.Group>\r\n        <Button variant=\"secondary\" type=\"button\" onClick={e => handlePrev(e)}>\r\n          Back\r\n        </Button>{' '}\r\n        <Button variant=\"success\" type=\"submit\" disabled={!isValid}>\r\n          Review Order\r\n        </Button>\r\n      </Form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nCustomer.propTypes = {};\r\n\r\nconst mapStateToProps = state => ({\r\n  customerRed: state.customer,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setCustomer: data => dispatch(setCustomer(data)),\r\n  nextMenu: () => dispatch(nextMenu()),\r\n  previousMenu: () => dispatch(previousMenu()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Customer);\r\n","import { SET_CUSTOMER, CLEAR_CUSTOMER } from './types';\r\n\r\nexport const setCustomer = ({ name, email, street, phone, city, state }) => {\r\n  return {\r\n    type: SET_CUSTOMER,\r\n    payload: {\r\n      name: name.trim(),\r\n      email: email.trim(),\r\n      street: street.trim(),\r\n      phone: phone.trim(),\r\n      city: city.trim(),\r\n      state: state.trim(),\r\n    },\r\n  };\r\n};\r\n\r\nexport const clearCustomer = () => {\r\n  return {\r\n    type: CLEAR_CUSTOMER,\r\n  };\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { TOPPINGS } from '../config/constants';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\n\r\nimport { setToppings, clearToppings } from '../actions/pizza';\r\nimport { nextMenu, previousMenu } from '../actions/menu';\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst Toppings = ({\r\n  pizzaRed,\r\n  nextMenu,\r\n  setToppings,\r\n  clearToppings,\r\n  previousMenu,\r\n}) => {\r\n  const handlePrev = e => {\r\n    e.preventDefault();\r\n    // Navigate user to the previous step\r\n    previousMenu();\r\n  };\r\n\r\n  const handleNext = e => {\r\n    e.preventDefault();\r\n    // Navigate user to the next step\r\n    nextMenu();\r\n  };\r\n\r\n  const handleChange = selectedOptions => {\r\n    const toppingValues =\r\n      selectedOptions === null\r\n        ? []\r\n        : selectedOptions.map(topping => topping.value);\r\n    setToppings(toppingValues);\r\n  };\r\n\r\n  const isToppingSelected = testValue => {\r\n    for (let value of pizzaRed.toppings) {\r\n      if (value === testValue) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const availableToppings = [];\r\n  const selectedToppings = [];\r\n\r\n  for (let topping of TOPPINGS) {\r\n    if (isToppingSelected(topping.value)) {\r\n      selectedToppings.push(topping);\r\n    } else {\r\n      availableToppings.push(topping);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"display-4\">Toppings</h1>\r\n      <Select\r\n        closeMenuOnSelect={false}\r\n        components={animatedComponents}\r\n        value={selectedToppings}\r\n        options={availableToppings}\r\n        onChange={handleChange}\r\n        isMulti\r\n      />\r\n      <div className=\"mt-3\">\r\n        <Button variant=\"secondary\" type=\"button\" onClick={e => handlePrev(e)}>\r\n          Back\r\n        </Button>{' '}\r\n        <Button variant=\"success\" type=\"button\" onClick={e => handleNext(e)}>\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nToppings.propTypes = {};\r\n\r\nconst mapStateToProps = state => ({\r\n  pizzaRed: state.pizza,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setToppings: toppings => dispatch(setToppings(toppings)),\r\n  clearToppings: () => dispatch(clearToppings()),\r\n  nextMenu: () => dispatch(nextMenu()),\r\n  previousMenu: () => dispatch(previousMenu()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Toppings);\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\nimport { nextMenu, previousMenu } from '../actions/menu';\r\n\r\nimport { TOPPINGS, SAUCE_LEVELS, CRUST_SIZES } from '../config/constants';\r\n\r\nconst ReviewOrder = ({ nextMenu, previousMenu, customerRed, pizzaRed }) => {\r\n  const handlePrev = e => {\r\n    e.preventDefault();\r\n    // Navigate user to the previous step\r\n    previousMenu();\r\n  };\r\n\r\n  const handleNext = e => {\r\n    e.preventDefault();\r\n    nextMenu();\r\n  };\r\n\r\n  // map and filter the selected toppings\r\n  const selectedToppings = TOPPINGS.reduce((accumulator, topping) => {\r\n    if (pizzaRed.toppings.includes(topping.value)) {\r\n      accumulator.push(topping.label);\r\n    }\r\n    return accumulator;\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"display-4\">Review Order</h1>\r\n      <div className=\"mb-3\">\r\n        <p className=\"lead mb-1\">Pizza</p>\r\n        <Row>\r\n          <Col>Sauce Level</Col>\r\n          <Col>\r\n            {\r\n              // map sauce level id to string\r\n              SAUCE_LEVELS.find(sauce => sauce.value === pizzaRed.sauceLevel)\r\n                .label\r\n            }\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>Crust Size</Col>\r\n          <Col>\r\n            {\r\n              // map crust size id to string\r\n              CRUST_SIZES.find(crust => crust.value === pizzaRed.crustSize)\r\n                .label\r\n            }\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>Toppings</Col>\r\n          <Col>{selectedToppings.join(', ')}</Col>\r\n        </Row>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <p className=\"lead mb-1\">Customer</p>\r\n        <Row>\r\n          <Col>Name</Col>\r\n          <Col>{customerRed.name}</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>Email</Col>\r\n          <Col>{customerRed.email}</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>Street</Col>\r\n          <Col>{customerRed.street}</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>City</Col>\r\n          <Col>{customerRed.city}</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>State</Col>\r\n          <Col>{customerRed.state}</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>Phone</Col>\r\n          <Col>{customerRed.phone}</Col>\r\n        </Row>\r\n      </div>\r\n      <p>\r\n        <i>Please review your order.</i>\r\n      </p>\r\n      <Button variant=\"secondary\" type=\"button\" onClick={e => handlePrev(e)}>\r\n        Back\r\n      </Button>{' '}\r\n      <Button variant=\"success\" type=\"submit\" onClick={e => handleNext(e)}>\r\n        Confirm Order\r\n      </Button>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nReviewOrder.propTypes = {};\r\n\r\nconst mapStateToProps = state => ({\r\n  customerRed: state.customer,\r\n  pizzaRed: state.pizza,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  nextMenu: () => dispatch(nextMenu()),\r\n  previousMenu: () => dispatch(previousMenu()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReviewOrder);\r\n","import React, { Fragment, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { resetMenu } from '../actions/menu';\r\nimport { clearCustomer } from '../actions/customer';\r\nimport { resetPizza } from '../actions/pizza';\r\n\r\nconst Confirmation = ({\r\n  customerRed,\r\n  resetMenu,\r\n  clearCustomer,\r\n  resetPizza,\r\n}) => {\r\n  useEffect(() => {\r\n    // navigate back to the Landing view after 7 seconds, clearing all the Redux states\r\n    setTimeout(() => {\r\n      clearCustomer();\r\n      resetPizza();\r\n      resetMenu();\r\n    }, 7000);\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"display-4\">Order Confirmation</h1>\r\n      <p>Thank you for your order, {customerRed.name}!</p>\r\n      <p>Your pizza may arrive shortly... or not at all :p</p>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nConfirmation.propTypes = {};\r\n\r\nconst mapStateToProps = state => ({\r\n  customerRed: state.customer,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  resetMenu: () => dispatch(resetMenu()),\r\n  clearCustomer: () => dispatch(clearCustomer()),\r\n  resetPizza: () => dispatch(resetPizza()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Confirmation);\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Landing from './Landing';\r\nimport SauceCrust from './SauceCrust';\r\nimport Customer from './Customer';\r\nimport Toppings from './Toppings';\r\nimport ReviewOrder from './ReviewOrder';\r\nimport Confirmation from './Confirmation';\r\n\r\nconst Main = ({ menuRed }) => {\r\n  useEffect(() => {\r\n    console.log(menuRed);\r\n  }, []);\r\n\r\n  return (\r\n    // Display a proper component based on the order step.\r\n    // We can alternatively use routing, but this works just as fine.\r\n    <div>\r\n      {menuRed.step === 0 && <Landing />}\r\n      {menuRed.step === 1 && <SauceCrust />}\r\n      {menuRed.step === 2 && <Toppings />}\r\n      {menuRed.step === 3 && <Customer />}\r\n      {menuRed.step === 4 && <ReviewOrder />}\r\n      {menuRed.step === 5 && <Confirmation />}\r\n    </div>\r\n  );\r\n};\r\n\r\nMain.propTypes = {};\r\n\r\nconst mapStateToProps = state => ({\r\n  menuRed: state.menu,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","import { NEXT_MENU, PREVIOUS_MENU, RESET_MENU } from '../actions/types';\r\n\r\nconst initialState = {\r\n  step: 0,\r\n};\r\n\r\nexport const menu = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case NEXT_MENU:\r\n      return {\r\n        step: state.step + 1,\r\n      };\r\n\r\n    case PREVIOUS_MENU:\r\n      return {\r\n        step: Math.max(state.step - 1, 0),\r\n      };\r\n    case RESET_MENU:\r\n      return {\r\n        ...initialState,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  SET_CRUST_SIZE,\r\n  SET_SAUCE_LEVEL,\r\n  SET_TOPPINGS,\r\n  CLEAR_TOPPINGS,\r\n  RESET_PIZZA,\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  sauceLevel: 0,\r\n  crustSize: 8,\r\n  toppings: ['cheese'],\r\n};\r\n\r\nexport const pizza = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_SAUCE_LEVEL:\r\n      return {\r\n        ...state,\r\n        sauceLevel: action.payload,\r\n      };\r\n    case SET_CRUST_SIZE:\r\n      return {\r\n        ...state,\r\n        crustSize: action.payload,\r\n      };\r\n    case SET_TOPPINGS:\r\n      return {\r\n        ...state,\r\n        toppings: action.payload,\r\n      };\r\n    case CLEAR_TOPPINGS:\r\n      return Object.assign({}, state, { toppings: [] });\r\n    case RESET_PIZZA:\r\n      return {\r\n        ...initialState,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SET_CUSTOMER, CLEAR_CUSTOMER } from '../actions/types';\r\n\r\nconst initialState = {\r\n  name: '',\r\n  email: '',\r\n  street: '',\r\n  city: '',\r\n  state: '',\r\n  phone: '',\r\n};\r\n\r\nexport const customer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CUSTOMER:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    case CLEAR_CUSTOMER:\r\n      return {\r\n        ...initialState,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { menu } from './menu';\r\nimport { pizza } from './pizza';\r\nimport { customer } from './customer';\r\n\r\nexport default combineReducers({\r\n  menu,\r\n  pizza,\r\n  customer,\r\n});\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nimport Main from './components/Main';\r\n\r\nimport { Container } from 'react-bootstrap';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './reducers';\r\nimport { createStore } from 'redux';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Container>\r\n        <Main />\r\n      </Container>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}